Metadata-Version: 2.1
Name: token_accessor
Version: 0.0.1
Summary: A library for accessing the Token Cache API
Author-email: "Altis Labs, Inc." <info@altislabs.com>
Project-URL: Homepage, https://github.com/altis-labs/token_accessor
Project-URL: Issues, https://github.com/altis-labs/token_accessor/issues
Requires-Python: >=3.11
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aws-requests-auth==0.4.3
Requires-Dist: backoff==2.2.1; python_version >= "3.7" and python_version < "4.0"
Requires-Dist: boto3==1.26.165; python_version >= "3.7"
Requires-Dist: botocore==1.29.165; python_version >= "3.7"
Requires-Dist: certifi==2023.11.17; python_version >= "3.6"
Requires-Dist: charset-normalizer==2.0.12; python_version >= "3"
Requires-Dist: gevent==22.10.2; python_version >= "2.7" and python_version not in "3.0, 3.1, 3.2, 3.3, 3.4, 3.5"
Requires-Dist: gql[requests]==3.4.1
Requires-Dist: graphql-core==3.2.3; python_version >= "3.6" and python_version < "4"
Requires-Dist: greenlet==3.0.3; platform_python_implementation == "CPython"
Requires-Dist: idna==3.6; python_version >= "3"
Requires-Dist: jmespath==1.0.1; python_version >= "3.7"
Requires-Dist: multidict==6.0.4; python_version >= "3.7"
Requires-Dist: pydantic==1.10.13; python_version >= "3.7"
Requires-Dist: python-dateutil==2.8.2; python_version >= "2.7" and python_version not in "3.0, 3.1, 3.2, 3.3"
Requires-Dist: requests==2.27.1; python_version >= "2.7" and python_version not in "3.0, 3.1, 3.2, 3.3, 3.4, 3.5"
Requires-Dist: requests-toolbelt==0.10.1
Requires-Dist: s3transfer==0.6.2; python_version >= "3.7"
Requires-Dist: setuptools==69.0.3; python_version >= "3.8"
Requires-Dist: six==1.16.0; python_version >= "2.7" and python_version not in "3.0, 3.1, 3.2, 3.3"
Requires-Dist: typing-extensions==4.9.0; python_version >= "3.8"
Requires-Dist: urllib3==1.26.18; python_version >= "2.7" and python_version not in "3.0, 3.1, 3.2, 3.3, 3.4, 3.5"
Requires-Dist: yarl==1.9.4; python_version >= "3.7"
Requires-Dist: zope.event==5.0; python_version >= "3.7"
Requires-Dist: zope.interface==6.1; python_version >= "3.7"

# token_accessor

This package provides a token accessor that can be used to fetch and cache a token from a token provider.

## Notes:
- this is not published to PyPi, so it must be installed via git. As a result, build artifacts are included in this repo
- this is not a public package, so it is not supported for general usage


## Usage

### Installing as a dependency

You can reference this package as you would other python packages.

#### Pipenv

Install package this via:

```
pipenv install git+https://github.com/altis-labs/token_accessor.git#egg=token_accessor
```

### To get a raw token

> **Note**: the `create_<client>_token_accessor` takes in an optional scope.
> Each client has the appropriate defaults set for the scope, so it is not
> required to pass in a scope. Specifying an unsupported/unauthorized scope for
> the client may result in a 404 error

```python
from token_accessor.token_cache_token_accessor import
    create_generic_client_token_accessor

# Create a token accessor
token_accessor = create_generic_client_token_accessor()

# Fetch the token
token = token_accessor.get_token()

# The resulting token can be used directly via:
print(token.token)

# Alternatively, the token has a helper function to get auth HTTP headers
headers = token.get_auth_header()
```

### To use a token for a GraphQL request

```python
from token_accessor.token_cache_token_accessor import
    create_generic_client_token_accessor
from token_accessor.gql_client import GqlClient
from gql import gql

# Create a token accessor
token_accessor = create_generic_client_token_accessor()

query = gql(
    """
        query someGqlQuery(
            $some_variable: String!
        ) {
            someGqlQuery(
                some_variable: $some_variable
            ) {
                some_field
            }
        }
    """)

# Create a gql client with the token accessor, which will automatically fetch and use a token when the request is executed
gql_client = GqlClient("https://someurl.com", token_accessor)

# Execute the GraphQL query
result = gql_client.execute(
    query,
    variable_values={
        "some_variable": "some value"
    }
)
```
